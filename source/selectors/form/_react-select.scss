// Animation

// fade in

@keyframes Select-animation-fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

// Select

.Select {
    position: relative;

    // handle disabled state
    &.is-disabled > .Select-control {
        background-color: $input-bg-disabled;

        &:hover {
            box-shadow: none;
        }
    }

    &.is-disabled .Select-arrow-zone {
        cursor: default;
        pointer-events: none;
    }
}

// base

.Select-control {
    @extend %input;
    cursor: default;
    display: table;
    padding-right: 0;
}

.is-searchable {
    &.is-open > .Select-control {
        cursor: text;
    }

    &.is-focused:not(.is-open) > .Select-control {
        cursor: text;
    }
}

.is-open > .Select-control {
    border-radius: $input-border-radius $input-border-radius 0 0;

    // flip the arrow so its pointing up when the menu is open

    > .Select-arrow {
        border-color: transparent transparent $select-arrow-color;
        border-width: 0 $select-arrow-width $select-arrow-width;
    }
}

// arrow indicator

.Select-arrow-zone {
    cursor: pointer;
    display: table-cell;
    position: relative;
    text-align: center;
    vertical-align: middle;
    padding-right: $select-arrow-width;
    width: ($select-arrow-width * 5);
}

.Select-arrow {
    border-color: $select-arrow-color transparent transparent;
    border-style: solid;
    border-width: $select-arrow-width $select-arrow-width ($select-arrow-width / 2);
    display: inline-block;
    height: 0;
    width: 0;
}

.is-open .Select-arrow,
.Select-arrow-zone:hover > .Select-arrow {
    border-top-color: $select-arrow-color-hover;
}


// the little cross that clears the field

.Select-clear-zone {
    animation: Select-animation-fadeIn 200ms;
    color: $select-clear-color;
    cursor: pointer;
    display: table-cell;
    position: relative;
    text-align: center;
    vertical-align: middle;
    width: $select-clear-width;

    &:hover {
        color: $select-clear-hover-color;
    }
}

.Select-clear {
    display: inline-block;
    font-size: $select-clear-size;
    line-height: 1;
}

.Select--multi .Select-clear-zone {
    width: $select-clear-width;
}

// fake-hide the input when the control is pseudo-focused
.has-value.is-pseudo-focused .Select-input {
    opacity: 0;
}

// fake input
.Select-control:not(.is-searchable) > .Select-input {
    outline: none;
}

// placeholder

.Select-placeholder,
:not(.Select--multi) > .Select-control .Select-item {
    bottom: 0;
    color: $select-input-placeholder;
    left: 0;
    line-height: $select-input-internal-height;
    padding-left: $input-horizontal-padding;
    padding-right: $input-horizontal-padding;
    position: absolute;
    right: 0;
    top: 0;

    // crop text
    max-width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.has-value:not(.Select--multi):not(.is-focused) > .Select-control > .Select-item,
.has-value.is-pseudo-focused:not(.Select--multi) > .Select-control > .Select-item {
    .Select-item-label {
        color: $select-text-color;
    }

    a.Select-item-label {
        cursor: pointer;
        text-decoration: none;

        &:hover {
            color: $select-link-hover-color;
            text-decoration: underline;
        }
    }
}


// the <input> element users type in

.Select-input {
    // inherits `display: inline-block` from "react-input-autosize"
    height: inherit;
    vertical-align: middle;

    > input {
        background: none transparent;
        border: 0 none;
        box-shadow: none;
        cursor: default;
        display: inline-block;
        font-family: inherit;
        font-size: inherit;
        height: inherit;
        margin: 0;
        outline: none;
        padding: 0;
        appearance: none;

        .is-focused & {
            cursor: text;
        }
    }

}

.is-focused:not(.is-open) > .Select-control {
    border-color: darken($input-border-color, 15%);
    box-shadow: 0 0 0 rgba(color($black), .06), inset 0 1px 2px rgba(color($black), .125);
}

// wrapper around the menu

.Select-menu-outer {
    // Unfortunately, having both border-radius and allows scrolling using overflow defined on the same
    // element forces the browser to repaint on scroll.  However, if these definitions are split into an
    // outer and an inner element, the browser is able to optimize the scrolling behavior and does not
    // have to repaint on scroll.
    border-radius: 0 0 $input-border-radius $input-border-radius;
    border: 1px solid $input-focused-border-color;
    border-top-color: mix($input-bg, $input-focused-border-color, 50%);
    box-shadow: 0 1px 0 rgba(0, 0, 0, .06);
    margin-top: -1px;
    max-height: $select-menu-max-height;
    position: absolute;
    top: 100%;
    width: 100%;
    z-index: $select-menu-zindex;
    -webkit-overflow-scrolling: touch;
}

// wrapper

.Select-menu {
    max-height: ($select-menu-max-height - 2px);
    overflow-y: auto;
}

// options

.Select-option {
    background-color: $select-option-bg;
    color: $select-option-color;
    cursor: pointer;
    display: block;
    padding: $input-vertical-padding $input-horizontal-padding;

    &:last-child {
        border-radius: 0 0 $input-border-radius $input-border-radius;
    }

    &.is-focused {
        background-color: $select-option-focused-bg;
        color: $select-option-focused-color;
    }

    &.is-disabled {
        color: $select-option-disabled-color;
        cursor: default;
    }
}

// no results

.Select-noresults {
    color: $select-noresults-color;
    cursor: default;
    display: block;
    padding: $input-vertical-padding $input-horizontal-padding;
}

// Multi-Select

.Select--multi {

    &.has-value .Select-control {
        padding-bottom: $input-vertical-padding / 2;
    }

    // add margin to the input element
    .Select-input {
        // border: 1px solid transparent;
        padding: 0;
        vertical-align: middle;
    }

    // reduce margin once there is value
    &.has-value .Select-input {
        margin-left: $select-item-gutter;
    }

    // Items
    .Select-item {
        background-color: $select-item-bg;
        border-radius: $input-border-radius;
        border: 1px solid $select-item-border-color;
        color: $select-item-color;
        display: inline-block;
        font-size: $select-item-font-size;
        margin: -2px 0 ($input-vertical-padding / 2) $select-item-gutter;
        vertical-align: top;
    }

    // common
    .Select-item-icon,
    .Select-item-label {
        display: inline-block;
        vertical-align: middle;
    }

    // label
    .Select-item-label {
        border-radius: 0 $input-border-radius 0 0;
        cursor: default;
        padding: $select-item-padding-vertical $select-item-padding-horizontal;
    }

    a.Select-item-label {
        color: $select-item-color;
        cursor: pointer;
        text-decoration: none;

        &:hover {
            text-decoration: underline;
        }
    }

    // icon
    .Select-item-icon {
        border-radius: $input-border-radius 0 0;
        border-right: 1px solid $input-border-color;
        cursor: pointer;

        // move the baseline up by 1px
        padding: ($select-item-padding-vertical - 1) $select-item-padding-horizontal ($select-item-padding-vertical + 1);

        &:hover,
        &:focus {
            background-color: $select-item-hover-bg;
            color: $select-item-hover-color;
        }

        &:active {
            background-color: $select-item-border-color;
        }
    }

}

.Select--multi.is-disabled {
    .Select-item {
        background-color: $input-bg-disabled;
        border: 1px solid $select-item-disabled-border-color;
        color: $select-item-disabled-color;
    }

    // icon
    .Select-item-icon {
        border-right: 1px solid $select-item-disabled-border-color;
        cursor: not-allowed;

        &:hover,
        &:focus,
        &:active {
            background-color: $input-bg-disabled;
        }
    }
}

/*



// loading indicator
.Select-loading-zone {
    cursor: pointer;
    display: table-cell;
    position: relative;
    text-align: center;
    vertical-align: middle;
    width: $select-loading-size;
}
.Select-loading {
    @include Select-spinner($select-loading-size, $select-loading-color-bg, $select-loading-color);
    vertical-align: middle;
}
*/
